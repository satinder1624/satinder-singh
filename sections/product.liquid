<section class="homeProductCollection">
  <div class="container">
    <div class="productGrid">
      {% assign collection = collections.frontPage %}
      {% if collection.products.size > 0 %}
        {% for product in collection.products %}
          <div class="productItem">
            <div class="productImageWrapper">
              <img
                class="mobileImage"
                src="{{ product.featured_image | img_url: '500x500' }}"
                alt="{{ product.title }}"
              >
              <div
                class="plusOverlay"
                data-product-id="{{ forloop.index }}"
                style="
                  {% if forloop.index == 1 %} top: 205px; right: 192px; {% elsif forloop.index == 2 %} top: 150px; right: 140px; {% elsif forloop.index == 3 %} top: 90px; right: 200px; {% elsif forloop.index == 4 %} top: 80px; right: 170px; {% elsif forloop.index == 5 %} top: 80px; right: 230px; {% else %} top: 100px; right: 170px; {% endif %}
                "
              >
                <span class="plusIcon">+</span>
              </div>
            </div>
          </div>

          <!-- Dialog modal for product info -->
          <dialog class="productModal" id="modal-{{ forloop.index }}">
            <div class="modalContent">
              <span class="closeModal" data-product-id="{{ forloop.index }}">
                <img src="{{ 'cross.png' | asset_url }}" alt="Close" />
              </span>
              <div class="productInfoContainer">
                <div class="productImg">
                  <img
                    src="{{ product.featured_image | img_url: '280x280' }}"
                    alt="{{ product.title }}"
                  >
                </div>
                <div class="productDetails">
                  <span class="productTitle">{{ product.title }}</span>
                  <span class="productPrice">{{ product.price | money_with_currency }}</span>
                  <span class="productDescription">{{ product.description | strip_html | truncate: 100 }}</span>
                </div>
              </div>

              <!-- Product form -->
              <form class="productForm" id="form-{{ forloop.index }}" data-product-handle="{{ product.handle }}">
                <!-- Color selection -->
                <div class="colorWrapper">
                  <span class="colorLabel">Color</span>
                  <div class="colorContainer">
                    {% assign available_colors = '' %}
                    {% for variant in product.variants %}
                      {% unless available_colors contains variant.option2 %}
                        {% assign available_colors = available_colors | append: variant.option2 | append: ',' %}
                      {% endunless %}
                    {% endfor %}
                    {% assign color_list = available_colors | split: ',' %}
                    {% for color in color_list %}
                      {% if color != '' %}
                        <div class="colorBox" data-color="{{ color }}" style="background-color: {{ color }};">
                          <span>{{ color }}</span>
                        </div>
                      {% endif %}
                    {% endfor %}
                  </div>
                </div>

                <!-- Size selection -->
                <div class="dropdown">
                  <div class="dropdownContent">
                    <div class="dropdownLabel">Select Size</div>
                    <div class="dropdownArrow"></div>
                  </div>
                  <div class="dropdownOptions">
                    {% assign available_sizes = '' %}
                    {% for variant in product.variants %}
                      {% unless available_sizes contains variant.option1 %}
                        {% assign available_sizes = available_sizes | append: variant.option1 | append: ',' %}
                        <div class="option">{{ variant.option1 }}</div>
                      {% endunless %}
                    {% endfor %}
                  </div>
                </div>

                <!-- Add to cart -->
                <div class="addToCart">
                  <button type="submit" class="addToCartBtn">Add to cart</button>
                </div>
              </form>
            </div>
          </dialog>
        {% endfor %}
      {% else %}
        <p>No products, sorry!</p>
      {% endif %}
    </div>
  </div>
</section>

<script>
// Handle modal opening and closing
document.addEventListener('DOMContentLoaded', function () {
  // Open modal
  document.querySelectorAll('.plusOverlay').forEach(function (overlay) {
    overlay.addEventListener('click', function () {
      const productId = this.getAttribute('data-product-id');
      const modal = document.getElementById('modal-' + productId);
      modal.showModal();
    });
  });

  // Close modal
  document.querySelectorAll('.closeModal').forEach(function (button) {
    button.addEventListener('click', function () {
      const productId = this.getAttribute('data-product-id');
      const modal = document.getElementById('modal-' + productId);
      modal.close();
    });
  });

  // Close modal when clicking outside of it
  window.addEventListener('click', function (event) {
    if (event.target.tagName === 'DIALOG' && event.target.hasAttribute('open')) {
      event.target.close();
    }
  });

  // Handle color selection
  document.querySelectorAll('.colorBox').forEach(function (box) {
    box.addEventListener('click', function () {
      document.querySelectorAll('.colorBox').forEach(function (b) {
        b.classList.remove('active');
      });
      this.classList.add('active');
    });
  });

  // Handle dropdown toggle
  document.querySelectorAll('.dropdown').forEach(function (dropdown) {
    dropdown.addEventListener('click', function () {
      this.classList.toggle('active');
    });
  });

  // Handle dropdown option selection
  document.addEventListener('click', function (event) {
    if (event.target.classList.contains('option')) {
      const dropdown = event.target.closest('.dropdown');
      const label = dropdown.querySelector('.dropdownLabel');
      label.textContent = event.target.textContent;
      dropdown.classList.remove('active');
    }
  });

  // Handle form submission
  document.querySelectorAll('.productForm').forEach(function (form) {
    form.addEventListener('submit', function (event) {
      event.preventDefault();
      
      const formData = new FormData(this);
      const formElement = this;
      const selectedSize = formElement.querySelector('.dropdownLabel').textContent;
      const selectedColor = formElement.querySelector('.colorBox.active')?.getAttribute('data-color');

      if (!selectedSize || !selectedColor) {
        alert('Please select a size and color.');
        return;
      }

      // Append selected attributes to form data
      formData.append('properties[size]', selectedSize);
      formData.append('properties[color]', selectedColor);

      // Add item to cart
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams(formData).toString()
      })
      .then(response => response.json())
      .then(data => {
        alert('Product added to cart successfully!');
        window.location.href = '/cart';
      })
      .catch(error => {
        console.error('Error adding product to cart:', error);
        alert('Failed to add product to cart. Please try again.');
      });
    });
  });
});
</script>
